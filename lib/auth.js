import cookie from 'cookie'import { redirect } from './helpers';import { loggedInUserQuery } from '../components/api/queries';import { graphql } from 'react-apollo';const storageKey = 'i9-auth-token';export const setToken = token => {    document.cookie = cookie.serialize(storageKey, token, {        maxAge: 30 * 24 * 60 * 60 // 30 days    })}export const getToken = (headers = {}) => {    const cookies = cookie.parse(        process.browser            ? document.cookie            : headers.cookie || '',    );    return cookies ? cookies[storageKey] : '';}function clearToken() {    document.cookie = cookie.serialize(storageKey, '', {        maxAge: -1 // Expire the cookie immediately    })}export const logout = (ctx) => {    clearToken()    redirect('/', ctx);    location.reload()}export const withLoggedInUser = graphql(loggedInUserQuery, {    skip: ({ctx}) => {        return process.browser ? !getToken() : ctx && !getToken(ctx.req.headers);    },    props: ({data, ownProps: {ctx}}) => {        if (!data.loading && !data.loggedInUser) {            redirect('/login', ctx)        }        return {            loggedInUser: data.loggedInUser,            refetchLoggedInUser: data.refetch,            loggedInUserLoading: data.loading,        };    },});export const checkLoggedIn = graphql(loggedInUserQuery, {    skip: ({ctx}) => {        return process.browser ? !getToken() : ctx && !getToken(ctx.req.headers);    },    props: ({data, ownProps: {ctx}}) => {        if (!data.loading && data.loggedInUser) {            redirect('/', ctx)        }        return {            loggedInUser: data.loggedInUser,            refetchLoggedInUser: data.refetch,            loggedInUserLoading: data.loading,        };    },});