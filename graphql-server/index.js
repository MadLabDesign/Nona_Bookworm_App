const {GraphQLServer} = require('graphql-yoga');const axios = require('axios')const https = require('https')const QueryString = require('querystring');const eva = axios.create({    httpsAgent: new https.Agent({        rejectUnauthorized: false,    }),    baseURL: 'https://localhost:44386/api',    // timeout: 5000,    headers: {'Content-Type': 'application/json'},});const handleError = e => {    console.log(e);    debugger;    throw new Error(e.response.data.error || 'Unknown Error')}const convertParams = params => {    const keys = Object.keys(params);    const result = {};    keys.forEach(key => {        result[key[0].toUpperCase() + key.substr(1, key.length - 1)] = params[key];    })    return result;}// language=GraphQL Schemaconst typeDefs = `    type User {        id: ID!        guid: String!        firstName: String!        lastName: String!        email: String!        password: String!        ieqPackage: String!        ieqCompleted: Boolean!    }    type Session {        token: String    }    type Status {        status: String!    }    type Query {        allUsers: [User!]!        User(id: ID!): User!        UserByGuid(guid: String!): User!        loggedInUser: User!    }    type Mutation {        register(email: String!, password: String!, firstName: String, lastName: String): Session!        login(email: String!, password: String!): Session!        forgotPassword(email: String!): Status!        resetPassword(code: String!, password: String!, confirmPassword: String!, userId: String!): Status!        updateUser(id: ID!, firstName: String, lastName: String, email: String, password: String, ieqCompleted: Boolean): User!        logout: Status!    }`;const resolvers = {    Query: {        allUsers: () => {            // return users;        },        User: () => {            // const user = users.find(x => x.id === id);            // if (!user) {            throw new Error('Cannot find your user!');            // }            // return user;        },        UserByGuid: (_, {guid}) => {            // const user = users.find(x => x.guid.toString() === guid);            // if (!user) {            //     throw new Error('Cannot find your user!');            // }            // return user;        },        loggedInUser: (_, {}, {req}) => {            if (!req.headers || !req.headers.authorization) throw new Error('No valid token');            const token = req.headers.authorization.split('Bearer ')[1];            debugger;            return eva({                method: 'GET',                url: '/result-session',                headers: {Authorization: `Bearer ${token}`},            })                .then(res => res.data)                .then(session => {                    if (!session) throw new Error('No valid token');                    console.log(session);                    return {                        ...session,                        ieqCompleted: !!session.resultSessionId,                        ieqPackage: 'pro', //TODO: get package type                    };                    // return resolvers.Query.User(_, session.userId);                })                .catch(handleError)        },    },    Mutation: {        register: () => {            return {}            // const user = users.find(x => x.email === email && x.password === password);            //user already exists. just log him in            // if (user) return newSession(user.id);            // const newUser = {            //     id: count++,            //     email,            //     firstName,            //     lastName,            //     password,            //     guid: Guid.create(),            //     ieqCompleted: false,            // }            // users = [...users, newUser];            // return newSession(newUser.id);        },        login: (_, {email, password}) => {            // const user = users.find(x => x.email === email && x.password === password);            return eva.post(`/login`, {                Email: email,                Password: password,            })                .then(res => res.data)                .then(user => {                    if (!user)                        throw new Error('Cannot find your user!');                    return {token: user.token}                    // return newSession(user.id)                })                .catch(handleError)        },        forgotPassword: async (_, {email}) => {            const res = await eva.post('/ForgotPassword', {Email: email})            if (res.data.emailSent) {                return {status: 'Email has been sent'}            }            return {status: `Unknnown Error: ${JSON.stringify(res)}`}        },        resetPassword: async (_, params) => {            params.code = QueryString.parse(`code=${params.code}`).code            debugger;            await eva.post('/ResetPassword', {...convertParams(params)})                .then(res => {                    console.log(res);                    debugger;                }, handleError)            return {status: 'Password has been reset'};        },        logout: async () => {            await eva.delete('/logout')            return {status: "Logged out successfully"}        },    },}const server = new GraphQLServer({typeDefs, resolvers, context: ({request}) => ({req: request})});server.start(() => {    console.log(        `ðŸ˜„ Server running at http://localhost:4000`,    );});